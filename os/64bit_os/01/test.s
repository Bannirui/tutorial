; @brief 屏幕上显示字符串 作为提示boot程序运行提示
;       显示一行字符串
;       中断号int 0x10
;       功能号AH=0x13
; @param AL=写入模式
;          Al=0x00 字符串属性由BL寄存器控制 字符串长度由CX寄存器控制(以Byte为单位) 光标位置不变(即写入前光标在哪写入后还在哪)
;          Al=0x01 字符串属性由BL寄存器控制 字符串长度由CX寄存器控制(以Byte为单位) 写入后光标在字符串尾端位置
;          Al=0x02 字符串属性由每个字符后面紧跟的字节提供 字符串长度由CX寄存器控制(以Word为单位) 光标位置不变(即写入前光标在哪写入后还在哪)
;          Al=0x03 字符串属性由每个字符后面紧跟的字节提供 字符串长度由CX寄存器控制(以Word为单位) 写入后光标在字符串尾端位置
; @param CX=字符串长度
; @param DH=游标的坐标行号(从0计)
; @param DL=游标的坐标列号(从0计)
; @param ES:BP=要显示字符串的内存地址
; @param BH=页码
; @param BL=字符串属性
;          BL[7]     字体闪烁 0=不闪烁 1=闪烁
;          BL[4...6] 背景颜色 0=黑色 1=蓝色 2=绿色 3=青色 4=红色 5=紫色 6=棕色 7=白色
;          BL[3]     字体亮度 0=字体正常 1=字体高亮
;          BL[0...2] 字体颜色 0=黑色 1=蓝色 2=绿色 3=青色 4=红色 5=紫色 6=棕色 7=白色
.print_msg:
    mov ax, 0x1301                                         ;                AH=0x13 AL=0x01
    mov cx, 12                                             ;                字符串长度
    mov dx, 0
    mov bx, 0x000f                                         ;                黑色背景 白字高亮不闪烁

    push ax                                                ;                AX寄存器要临时使用 先把中断调用的参数缓存到堆栈 中断调用之前再把参数出栈放到寄存器
    mov ax, ds
    mov es, ax
    mov bp, running_msg                                    ;                字符串地址[DS:变量地址]
    pop ax

    int 0x10